package snipptor.snipptor.snipptor.web.rest;

import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.Matchers.hasItem;
import static org.hamcrest.Matchers.is;

import java.time.Duration;
import java.util.List;
import java.util.Random;
import java.util.concurrent.atomic.AtomicLong;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.reactive.server.WebTestClient;
import snipptor.snipptor.snipptor.IntegrationTest;
import snipptor.snipptor.snipptor.domain.Vulnerability;
import snipptor.snipptor.snipptor.repository.EntityManager;
import snipptor.snipptor.snipptor.repository.VulnerabilityRepository;

/**
 * Integration tests for the {@link VulnerabilityResource} REST controller.
 */
@IntegrationTest
@AutoConfigureWebTestClient(timeout = IntegrationTest.DEFAULT_ENTITY_TIMEOUT)
@WithMockUser
class VulnerabilityResourceIT {

    private static final String DEFAULT_NAME = "AAAAAAAAAA";
    private static final String UPDATED_NAME = "BBBBBBBBBB";

    private static final String ENTITY_API_URL = "/api/vulnerabilities";
    private static final String ENTITY_API_URL_ID = ENTITY_API_URL + "/{id}";

    private static Random random = new Random();
    private static AtomicLong count = new AtomicLong(random.nextInt() + (2 * Integer.MAX_VALUE));

    @Autowired
    private VulnerabilityRepository vulnerabilityRepository;

    @Autowired
    private EntityManager em;

    @Autowired
    private WebTestClient webTestClient;

    private Vulnerability vulnerability;

    /**
     * Create an entity for this test.
     *
     * This is a static method, as tests for other entities might also need it,
     * if they test an entity which requires the current entity.
     */
    public static Vulnerability createEntity(EntityManager em) {
        Vulnerability vulnerability = new Vulnerability().name(DEFAULT_NAME);
        return vulnerability;
    }

    /**
     * Create an updated entity for this test.
     *
     * This is a static method, as tests for other entities might also need it,
     * if they test an entity which requires the current entity.
     */
    public static Vulnerability createUpdatedEntity(EntityManager em) {
        Vulnerability vulnerability = new Vulnerability().name(UPDATED_NAME);
        return vulnerability;
    }

    public static void deleteEntities(EntityManager em) {
        try {
            em.deleteAll(Vulnerability.class).block();
        } catch (Exception e) {
            // It can fail, if other entities are still referring this - it will be removed later.
        }
    }

    @AfterEach
    public void cleanup() {
        deleteEntities(em);
    }

    @BeforeEach
    public void initTest() {
        deleteEntities(em);
        vulnerability = createEntity(em);
    }

    @Test
    void createVulnerability() throws Exception {
        int databaseSizeBeforeCreate = vulnerabilityRepository.findAll().collectList().block().size();
        // Create the Vulnerability
        webTestClient
            .post()
            .uri(ENTITY_API_URL)
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(TestUtil.convertObjectToJsonBytes(vulnerability))
            .exchange()
            .expectStatus()
            .isCreated();

        // Validate the Vulnerability in the database
        List<Vulnerability> vulnerabilityList = vulnerabilityRepository.findAll().collectList().block();
        assertThat(vulnerabilityList).hasSize(databaseSizeBeforeCreate + 1);
        Vulnerability testVulnerability = vulnerabilityList.get(vulnerabilityList.size() - 1);
        assertThat(testVulnerability.getName()).isEqualTo(DEFAULT_NAME);
    }

    @Test
    void createVulnerabilityWithExistingId() throws Exception {
        // Create the Vulnerability with an existing ID
        vulnerability.setId(1L);

        int databaseSizeBeforeCreate = vulnerabilityRepository.findAll().collectList().block().size();

        // An entity with an existing ID cannot be created, so this API call must fail
        webTestClient
            .post()
            .uri(ENTITY_API_URL)
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(TestUtil.convertObjectToJsonBytes(vulnerability))
            .exchange()
            .expectStatus()
            .isBadRequest();

        // Validate the Vulnerability in the database
        List<Vulnerability> vulnerabilityList = vulnerabilityRepository.findAll().collectList().block();
        assertThat(vulnerabilityList).hasSize(databaseSizeBeforeCreate);
    }

    @Test
    void checkNameIsRequired() throws Exception {
        int databaseSizeBeforeTest = vulnerabilityRepository.findAll().collectList().block().size();
        // set the field null
        vulnerability.setName(null);

        // Create the Vulnerability, which fails.

        webTestClient
            .post()
            .uri(ENTITY_API_URL)
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(TestUtil.convertObjectToJsonBytes(vulnerability))
            .exchange()
            .expectStatus()
            .isBadRequest();

        List<Vulnerability> vulnerabilityList = vulnerabilityRepository.findAll().collectList().block();
        assertThat(vulnerabilityList).hasSize(databaseSizeBeforeTest);
    }

    @Test
    void getAllVulnerabilities() {
        // Initialize the database
        vulnerabilityRepository.save(vulnerability).block();

        // Get all the vulnerabilityList
        webTestClient
            .get()
            .uri(ENTITY_API_URL + "?sort=id,desc")
            .accept(MediaType.APPLICATION_JSON)
            .exchange()
            .expectStatus()
            .isOk()
            .expectHeader()
            .contentType(MediaType.APPLICATION_JSON)
            .expectBody()
            .jsonPath("$.[*].id")
            .value(hasItem(vulnerability.getId().intValue()))
            .jsonPath("$.[*].name")
            .value(hasItem(DEFAULT_NAME));
    }

    @Test
    void getVulnerability() {
        // Initialize the database
        vulnerabilityRepository.save(vulnerability).block();

        // Get the vulnerability
        webTestClient
            .get()
            .uri(ENTITY_API_URL_ID, vulnerability.getId())
            .accept(MediaType.APPLICATION_JSON)
            .exchange()
            .expectStatus()
            .isOk()
            .expectHeader()
            .contentType(MediaType.APPLICATION_JSON)
            .expectBody()
            .jsonPath("$.id")
            .value(is(vulnerability.getId().intValue()))
            .jsonPath("$.name")
            .value(is(DEFAULT_NAME));
    }

    @Test
    void getNonExistingVulnerability() {
        // Get the vulnerability
        webTestClient
            .get()
            .uri(ENTITY_API_URL_ID, Long.MAX_VALUE)
            .accept(MediaType.APPLICATION_JSON)
            .exchange()
            .expectStatus()
            .isNotFound();
    }

    @Test
    void putNewVulnerability() throws Exception {
        // Initialize the database
        vulnerabilityRepository.save(vulnerability).block();

        int databaseSizeBeforeUpdate = vulnerabilityRepository.findAll().collectList().block().size();

        // Update the vulnerability
        Vulnerability updatedVulnerability = vulnerabilityRepository.findById(vulnerability.getId()).block();
        updatedVulnerability.name(UPDATED_NAME);

        webTestClient
            .put()
            .uri(ENTITY_API_URL_ID, updatedVulnerability.getId())
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(TestUtil.convertObjectToJsonBytes(updatedVulnerability))
            .exchange()
            .expectStatus()
            .isOk();

        // Validate the Vulnerability in the database
        List<Vulnerability> vulnerabilityList = vulnerabilityRepository.findAll().collectList().block();
        assertThat(vulnerabilityList).hasSize(databaseSizeBeforeUpdate);
        Vulnerability testVulnerability = vulnerabilityList.get(vulnerabilityList.size() - 1);
        assertThat(testVulnerability.getName()).isEqualTo(UPDATED_NAME);
    }

    @Test
    void putNonExistingVulnerability() throws Exception {
        int databaseSizeBeforeUpdate = vulnerabilityRepository.findAll().collectList().block().size();
        vulnerability.setId(count.incrementAndGet());

        // If the entity doesn't have an ID, it will throw BadRequestAlertException
        webTestClient
            .put()
            .uri(ENTITY_API_URL_ID, vulnerability.getId())
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(TestUtil.convertObjectToJsonBytes(vulnerability))
            .exchange()
            .expectStatus()
            .isBadRequest();

        // Validate the Vulnerability in the database
        List<Vulnerability> vulnerabilityList = vulnerabilityRepository.findAll().collectList().block();
        assertThat(vulnerabilityList).hasSize(databaseSizeBeforeUpdate);
    }

    @Test
    void putWithIdMismatchVulnerability() throws Exception {
        int databaseSizeBeforeUpdate = vulnerabilityRepository.findAll().collectList().block().size();
        vulnerability.setId(count.incrementAndGet());

        // If url ID doesn't match entity ID, it will throw BadRequestAlertException
        webTestClient
            .put()
            .uri(ENTITY_API_URL_ID, count.incrementAndGet())
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(TestUtil.convertObjectToJsonBytes(vulnerability))
            .exchange()
            .expectStatus()
            .isBadRequest();

        // Validate the Vulnerability in the database
        List<Vulnerability> vulnerabilityList = vulnerabilityRepository.findAll().collectList().block();
        assertThat(vulnerabilityList).hasSize(databaseSizeBeforeUpdate);
    }

    @Test
    void putWithMissingIdPathParamVulnerability() throws Exception {
        int databaseSizeBeforeUpdate = vulnerabilityRepository.findAll().collectList().block().size();
        vulnerability.setId(count.incrementAndGet());

        // If url ID doesn't match entity ID, it will throw BadRequestAlertException
        webTestClient
            .put()
            .uri(ENTITY_API_URL)
            .contentType(MediaType.APPLICATION_JSON)
            .bodyValue(TestUtil.convertObjectToJsonBytes(vulnerability))
            .exchange()
            .expectStatus()
            .isEqualTo(405);

        // Validate the Vulnerability in the database
        List<Vulnerability> vulnerabilityList = vulnerabilityRepository.findAll().collectList().block();
        assertThat(vulnerabilityList).hasSize(databaseSizeBeforeUpdate);
    }

    @Test
    void partialUpdateVulnerabilityWithPatch() throws Exception {
        // Initialize the database
        vulnerabilityRepository.save(vulnerability).block();

        int databaseSizeBeforeUpdate = vulnerabilityRepository.findAll().collectList().block().size();

        // Update the vulnerability using partial update
        Vulnerability partialUpdatedVulnerability = new Vulnerability();
        partialUpdatedVulnerability.setId(vulnerability.getId());

        webTestClient
            .patch()
            .uri(ENTITY_API_URL_ID, partialUpdatedVulnerability.getId())
            .contentType(MediaType.valueOf("application/merge-patch+json"))
            .bodyValue(TestUtil.convertObjectToJsonBytes(partialUpdatedVulnerability))
            .exchange()
            .expectStatus()
            .isOk();

        // Validate the Vulnerability in the database
        List<Vulnerability> vulnerabilityList = vulnerabilityRepository.findAll().collectList().block();
        assertThat(vulnerabilityList).hasSize(databaseSizeBeforeUpdate);
        Vulnerability testVulnerability = vulnerabilityList.get(vulnerabilityList.size() - 1);
        assertThat(testVulnerability.getName()).isEqualTo(DEFAULT_NAME);
    }

    @Test
    void fullUpdateVulnerabilityWithPatch() throws Exception {
        // Initialize the database
        vulnerabilityRepository.save(vulnerability).block();

        int databaseSizeBeforeUpdate = vulnerabilityRepository.findAll().collectList().block().size();

        // Update the vulnerability using partial update
        Vulnerability partialUpdatedVulnerability = new Vulnerability();
        partialUpdatedVulnerability.setId(vulnerability.getId());

        partialUpdatedVulnerability.name(UPDATED_NAME);

        webTestClient
            .patch()
            .uri(ENTITY_API_URL_ID, partialUpdatedVulnerability.getId())
            .contentType(MediaType.valueOf("application/merge-patch+json"))
            .bodyValue(TestUtil.convertObjectToJsonBytes(partialUpdatedVulnerability))
            .exchange()
            .expectStatus()
            .isOk();

        // Validate the Vulnerability in the database
        List<Vulnerability> vulnerabilityList = vulnerabilityRepository.findAll().collectList().block();
        assertThat(vulnerabilityList).hasSize(databaseSizeBeforeUpdate);
        Vulnerability testVulnerability = vulnerabilityList.get(vulnerabilityList.size() - 1);
        assertThat(testVulnerability.getName()).isEqualTo(UPDATED_NAME);
    }

    @Test
    void patchNonExistingVulnerability() throws Exception {
        int databaseSizeBeforeUpdate = vulnerabilityRepository.findAll().collectList().block().size();
        vulnerability.setId(count.incrementAndGet());

        // If the entity doesn't have an ID, it will throw BadRequestAlertException
        webTestClient
            .patch()
            .uri(ENTITY_API_URL_ID, vulnerability.getId())
            .contentType(MediaType.valueOf("application/merge-patch+json"))
            .bodyValue(TestUtil.convertObjectToJsonBytes(vulnerability))
            .exchange()
            .expectStatus()
            .isBadRequest();

        // Validate the Vulnerability in the database
        List<Vulnerability> vulnerabilityList = vulnerabilityRepository.findAll().collectList().block();
        assertThat(vulnerabilityList).hasSize(databaseSizeBeforeUpdate);
    }

    @Test
    void patchWithIdMismatchVulnerability() throws Exception {
        int databaseSizeBeforeUpdate = vulnerabilityRepository.findAll().collectList().block().size();
        vulnerability.setId(count.incrementAndGet());

        // If url ID doesn't match entity ID, it will throw BadRequestAlertException
        webTestClient
            .patch()
            .uri(ENTITY_API_URL_ID, count.incrementAndGet())
            .contentType(MediaType.valueOf("application/merge-patch+json"))
            .bodyValue(TestUtil.convertObjectToJsonBytes(vulnerability))
            .exchange()
            .expectStatus()
            .isBadRequest();

        // Validate the Vulnerability in the database
        List<Vulnerability> vulnerabilityList = vulnerabilityRepository.findAll().collectList().block();
        assertThat(vulnerabilityList).hasSize(databaseSizeBeforeUpdate);
    }

    @Test
    void patchWithMissingIdPathParamVulnerability() throws Exception {
        int databaseSizeBeforeUpdate = vulnerabilityRepository.findAll().collectList().block().size();
        vulnerability.setId(count.incrementAndGet());

        // If url ID doesn't match entity ID, it will throw BadRequestAlertException
        webTestClient
            .patch()
            .uri(ENTITY_API_URL)
            .contentType(MediaType.valueOf("application/merge-patch+json"))
            .bodyValue(TestUtil.convertObjectToJsonBytes(vulnerability))
            .exchange()
            .expectStatus()
            .isEqualTo(405);

        // Validate the Vulnerability in the database
        List<Vulnerability> vulnerabilityList = vulnerabilityRepository.findAll().collectList().block();
        assertThat(vulnerabilityList).hasSize(databaseSizeBeforeUpdate);
    }

    @Test
    void deleteVulnerability() {
        // Initialize the database
        vulnerabilityRepository.save(vulnerability).block();

        int databaseSizeBeforeDelete = vulnerabilityRepository.findAll().collectList().block().size();

        // Delete the vulnerability
        webTestClient
            .delete()
            .uri(ENTITY_API_URL_ID, vulnerability.getId())
            .accept(MediaType.APPLICATION_JSON)
            .exchange()
            .expectStatus()
            .isNoContent();

        // Validate the database contains one less item
        List<Vulnerability> vulnerabilityList = vulnerabilityRepository.findAll().collectList().block();
        assertThat(vulnerabilityList).hasSize(databaseSizeBeforeDelete - 1);
    }
}
